async function addColumn(){const n=document.getElementById("MetricTypeId");if(n){const t=n.options[n.selectedIndex].text.toLowerCase().startsWith("number"),i={index:document.getElementsByClassName(t?"number-column":"coverage-column").length,type:t?"number":"coverage"},r=await postToServer("/Setting/Metric/AddColumn",undefined,i);document.getElementById("columns").insertAdjacentHTML("beforeend",r);hideProcessing()}else swal("Error","Unknown metric type!","error")}async function onSelectChange(){const n=document.getElementById("MetricTypeId"),t=n.options[n.selectedIndex].text.toLowerCase().startsWith("number");if(document.getElementsByClassName(t?"coverage-column":"number-column").length>0){const t=await swal({title:"Are you sure?",text:"You change a metric type to different type. If you really want to do this, all your metric columns must be deleted. Do you want to change metric type?",icon:"warning",buttons:["Cancel","Yes, change!"]});if(t){selectedTypeId=n.value;const t=document.getElementById("columns");while(t.firstChild)t.removeChild(t.firstChild)}else n.value=selectedTypeId}}function dropColumn(n){const i=document.getElementById(`del-${n}`),t=document.querySelectorAll(`#${n} input[type=text]`);if(t[0].value!==""||t.length===2&&t[1].value!==""){const r=document.querySelector(`#${n} .pointer`);i.value==="True"?(t.forEach(n=>{n.title="",n.disabled=!1}),r.title="Drop attribute",r.style.color="#495057",i.value="False"):(t.forEach(n=>{n.title="Metric attribute will be deleted!",n.disabled=!0}),r.title="Restore attribute",r.style.color="red",i.value="True")}else i.value="True",document.getElementById(n).classList.add("d-none")}let selectedTypeId;!function(){const n=document.getElementById("MetricTypeId");n&&(selectedTypeId=n.value)}();