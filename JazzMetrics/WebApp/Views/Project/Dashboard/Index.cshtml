@model ProjectDashboardViewModel

@{
    bool adminAccount = User.IsAdmin();
    ViewData["Title"] = $"Project #{Model.Id} dashboard";
    var warning = new ResultViewModel { Color = "tomato", CssClass = "fa-exclamation-circle ml-1", Message = "Caution, some of metrics are below defined limit!" };
}

<partial name="Partials/_ErrorTable" />

<div class="mb-3 d-flex flex-row justify-content-between align-items-center">
    <span>Dashboard of project '@Model.Name'.</span>

    <div class="d-flex flex-row">
        <a href="/Project" class="btn btn-secondary mr-2">
            <span class="fa fa-arrow-left"></span>
            Back to projects
        </a>

        <div class="mr-1">
            <a class="btn btn-secondary dropdown-toggle" href="#" role="button" id="mainDropdownMenu" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="fa fa-arrow-alt-circle-down"></span>
                Options
            </a>
            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="mainDropdownMenu">
                @if (adminAccount)
                {
                    <a href="/Project/@Model.Id/Metric/Add" class="dropdown-item">
                        <span class="fa fa-plus"></span>
                        Add metric to project
                    </a>
                }
                <button onclick="exportAllMetrics()" class="dropdown-item">
                    <span class="fa fa-file-export"></span>
                    Export all metrics
                </button>
                <button onclick="expandAllMetrics()" class="dropdown-item">
                    <span id="show-hide-icon" class="far fa-eye"></span>
                    <span id="show-hide-text">Show all metrics</span>
                </button>
                <button onclick="updateMetrics('@Model.Id')" class="dropdown-item">
                    <span class="fas fa-wrench"></span>
                    Update all metrics
                </button>
            </div>
        </div>
    </div>
</div>

@Html.AntiForgeryToken()

@if (Model.Metrics.Count == 0)
{
    <hr />
    <div class="text-center font-weight-bold">
        There is no project metrics.
    </div>
}

@{ int chartCount = 0; }
@for (int i = 0; i < Model.Metrics.Count; i++)
{
    string parent = $"parent-{i}", metric = $"metric-{i}";

    <hr />
    <div id="@parent" class="parent">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="btn-group btn-group-toggle" data-toggle="buttons">
                <label class="btn btn-secondary option1" onclick="showMetric('@metric')">
                    <input type="radio" name="options" autocomplete="off"> Show
                </label>
                <label class="btn btn-secondary active option2" onclick="hideMetric('@metric')">
                    <input type="radio" name="options" autocomplete="off"> Hide
                </label>
            </div>
            <div class="center-name d-flex align-items-center">
                <a href="/Project/@Model.Id/Metric/@Model.Metrics[i].Id/Log" title="Click to display project metric log" class="font-weight-bold lead  text-dark">@Model.Metrics[i].MetricInfo</a>
                @if (Model.Metrics[i].Warning)
                {
                    <partial name="Partials/_Icon" model="@warning" />
                }
            </div>
            <div>
                <span class="fa fa-info mr-2" title="@Model.Metrics[i].MetricDescription"></span>
                <button onclick="updateMetrics('@Model.Id', '@Model.Metrics[i].Id')" class="btn btn-secondary mr-2">
                    Update metric data
                </button>
            </div>
        </div>

        <div class="hidden-special @metric">
            @for (int j = 0; j < Model.Metrics[i].MetricColumns.Count; j++)
            {
                var labels = Html.Raw(Json.Serialize(Model.Metrics[i].MetricColumns[j].Labels));
                @if (Model.Metrics[i].MetricColumns[j].Type == ChartType.Line)
                {
                    @if (Model.Metrics[i].MetricColumns[j].Values.First().Count == 0)
                    {
                        <div class="text-center">
                            There is no metric snapshots.
                        </div>
                    }
                    else
                    {
                        string chart = $"chart-{chartCount++}";
                        <partial name="Dashboard/Partials/MetricChart" model="new ChartModel { ChartId = chart, MetricInfo = Model.Metrics[i].MetricInfo }" />
                        <script>
                        setTimeout(() =>
                            makeLineChart('@chart', @Html.Raw(Json.Serialize(Model.Metrics[i].MetricColumns[j].Values[0])), @labels, '@Model.Metrics[i].MetricColumns[j].Titles[0]')
                            , 1000);
                        </script>
                    }
                }
                else if (Model.Metrics[i].MetricColumns[j].Type == ChartType.Bar)
                {
                    <div id="@(metric)-carousel" class="carousel slide" data-ride="carousel" data-interval="false">
                        <div class="carousel-inner">
                            @for (int k = 0; k < Model.Metrics[i].MetricColumns[j].Values.Count; k++)
                            {
                                string chart = $"chart-{chartCount++}";
                                <div class="carousel-item @Html.Raw(k == Model.Metrics[i].MetricColumns[j].Values.Count - 1 ? "active" : "hidden-special")">
                                    <partial name="Dashboard/Partials/MetricChart" model="new ChartModel { ChartId = chart, MetricInfo = Model.Metrics[i].MetricInfo }" />
                                    <script>
                                        setTimeout(() =>
                                            makeBarChart('@chart', @Html.Raw(Json.Serialize(Model.Metrics[i].MetricColumns[j].Values[k])), @labels, '@Model.Metrics[i].MetricColumns[j].Titles[k]', '@j')
                                            , 1000);
                                    </script>
                                </div>
                            }

                            @if (Model.Metrics[i].MetricColumns[j].Values.Count == 0)
                            {
                                <div class="carousel-item active">
                                    <div class="text-center">
                                        There is no metric snapshots.
                                    </div>
                                </div>
                            }
                        </div>
                        <a class="carousel-control-prev" href="#@(metric)-carousel" role="button" data-slide="prev" title="back to history">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="sr-only">Previous</span>
                        </a>
                        <a class="carousel-control-next" href="#@(metric)-carousel" role="button" data-slide="next" title="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="sr-only">Next</span>
                        </a>
                    </div>
                }
                else
                {
                    <hr>
                    <div class="text-center">
                        <p>Unsupported metric type!</p>
                    </div>
                    <hr>
                }
            }
        </div>
    </div>
}